import {
  FC,
  useRef,
  useEffect,
  Children,
  isValidElement,
  default as React,
  useCallback,
  ReactNode,
  ComponentProps,
} from "react";
// import {
//   disableBodyScroll as __disableBodyScroll,
//   enableBodyScroll,
//   clearAllBodyScrollLocks,
// } from "b//ody-scroll-lock";
// import type { BodyScrollOptions } from "b//ody-scroll-lock";
// const bsOptions: BodyScrollOptions = {
//   reserveScrollBarGap: true,
// };
// const disableBodyScroll = (...args: any[]) => {
//   const opts: BodyScrollOptions =
//     typeof args[1] === "object"
//       ? args[1] && (args[1].reserveScrollBarGap = true) && args[1]
//       : bsOptions;
//   return __disableBodyScroll(args[0], opts);
// };
import Image from "next/image";
import { Map } from "immutable";
import { ChildFriendlyTwoTone, InterpreterMode } from "@mui/icons-material";
import { useRouter } from "next/router";
import { Portal } from "@mui/material";
import cn from "classnames";
import { styled } from "@components/ui";
import { Carousel } from "react-responsive-carousel";
import { Box, Paper } from "@components/ui";
import { blueGrey } from "@mui/material/colors";
import { IconButton } from "@components/ui";
import ArrowBackIosNewRoundedIcon from "@mui/icons-material/ArrowBackIosNewRounded";
import ArrowForwardIosRoundedIcon from "@mui/icons-material/ArrowForwardIosRounded";
const StyledIconBtn = styled(
  ({ children, ...props }: ComponentProps<typeof IconButton>) => {
    return <IconButton {...props}>{children}</IconButton>;
  }
)(({ theme }) => ({
  "&&&": {
    position: "absolute",
    top: "calc(50%-2rem)",
    zIndex: 20,
    opacity: 0.9,
    "&:hover": {
      opacity: 1,
      transform: "scale(1.1)",
      backgroundColor: "var(--hover-2)",
    },
  },
  "&&& .SvgIcon-root": {
    color: "white",
  },
  padding: "1rem",
  [theme.breakpoints.up("md")]: {
    padding: "1.3rem",
  },
  "& *": {
    fontSize: "2rem",
    [theme.breakpoints.up("md")]: {
      fontSize: "3rem",
    },
  },
}));
const SlideBackBtn = styled((props: ComponentProps<typeof IconButton>) => {
  return (
    <StyledIconBtn
      {...props}
      className={cn(props.className)}
    >
      <ArrowBackIosNewRoundedIcon />
    </StyledIconBtn>
  );
})(({ theme }) => ({}));
const SlideForwardBtn = styled((props: ComponentProps<typeof IconButton>) => {
  return (
    <StyledIconBtn
      {...props}
      className={cn(props.className)}
    >
      <ArrowForwardIosRoundedIcon />
    </StyledIconBtn>
  );
})(({ theme }) => ({}));
import { calculateAspectRatioFit } from "@lib/aspect-ration-fit";
import CloseRoundedIcon from "@mui/icons-material/CloseRounded";
interface OverlayProps
  extends React.DetailedHTMLProps<
    React.HTMLAttributes<HTMLDivElement>,
    HTMLDivElement
  > {
  isOpen: boolean;
  onClose: () => void;
}
const StyledCrossIcon = styled((props: ComponentProps<typeof IconButton>) => {
  return (
    <IconButton {...props}>
      <CloseRoundedIcon />
    </IconButton>
  );
})(({ theme }) => ({
  position: "absolute",
  top: "0.1rem",
  right: "0.4rem",
  padding: "0.5rem",
  borderRadius: "100%",
  transition: "all 100ms ease-in-out",
  zIndex: 51,
  cursor: "pointer",
  "&, & *": {
    color: "white",
    fontSize: "3rem",
  },
  "&&&": {
    opacity: 0.95,
    background: "rgba(0, 0, 0, 0.1)",
    transform: "scale(1.001)",
  },
  "&&&:hover": {
    opacity: 1,
    background: "rgba(0, 0, 0, 0.2)",
    transform: "scale(1.02)",
  },
}));
const StyledOverlay = ({
  isOpen,
  onClose,
  children,
  ...props
}: OverlayProps) => {
  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;
  return (
    <Portal>
      <div
        ref={ref}
        className="fixed inset-0 overflow-hidden h-full w-full z-50"
      >
        <div className="absolute inset-0 overflow-hidden flex h-full w-full">
          <div
            className="absolute inset-0 bg-black bg-opacity-50 transition-opacity h-full w-full"
            {...props}
          >
            <StyledCrossIcon
              onClick={(event) => {
                event.stopPropagation();
                onClose();
              }}
            />
            {children}
          </div>
        </div>
      </div>
    </Portal>
  );
};
const StyledCarousel = styled(Carousel)(({ theme }) => ({
  "& .carousel": {
    "& .carousel-status": {
      top: "auto",
      bottom: 0,
      right: "0.5rem",
      fontSize: "12pt",
      [theme.breakpoints.up("md")]: {
        fontSize: "20pt",
      },
      fontFamily: "Roboto, Helvetica, Arial",
      fontWeight: 400,
      textShadow:
        "1px 1px 1px rgb(0 0 0 / 90%), 0px 0px 1px rgb(0 0 0 / 90%), 0px 0px 2px rgb(0 0 0 / 90%)",
    },
    "& .thumbs-wrapper": {
      padding: 0,
      margin: 0,
      overflow: "hidden",
      marginTop: "6px",
      marginBottom: "6px",
      display: "flex",
      justifyContent: "center",
      borderRadius: "5px",
      "& .control-arrow": {
        marginTop: "-1.5rem",
        opacity: 1,
        "&:before": {
          borderTop: "1.5rem solid transparent",
          borderBottom: "1.5rem solid transparent",
        },
        "&:hover": {
          opacity: 1,
        },
      },
      "& .control-next": {
        right: "-0.2rem",
        "&:before": {
          borderLeft: `1rem solid ${theme.palette.primary.dark}`,
          borderRight: "none",
          "&:hover": {
            borderLeft: `1rem solid ${theme.palette.primary.main}`,
          },
        },
        "&:hover:before": {
          borderLeft: `1rem solid ${theme.palette.primary.main}`,
        },
      },
      "& .control-prev": {
        left: "-0.2rem",
        "&:before": {
          borderRight: `1rem solid ${theme.palette.primary.dark}`,
          borderLeft: "none",
        },
        "&:hover:before": {
          borderRight: `1rem solid ${theme.palette.primary.main}`,
        },
      },
      "& ul.thumbs": {
        padding: 0,
        margin: 0,
        zIndex: 0,
        height: "80px",
        borderRadius: "7px",
        "& .thumb": {
          padding: 0,
          borderWidth: "4px",
          width: "80px",
          height: "80px",
          background: "grey",
          borderRadius: "7px",
          "& img": {
            borderRadius: "5px",
          },
          borderColor: blueGrey[300],
          "&:hover": {
            borderColor: blueGrey[600],
          },
          "&.selected, &.selected:hover": {
            borderColor: theme.palette.primary.main,
          },
        },
      },
    },
    "& .control-dots": {
      padding: 0,
      margin: 0,
      marginBottom: "3px",
      "& .dot": {
        width: "0.5rem",
        height: "0.5rem",
        margin: "0 0.4rem",
        background: blueGrey[300],
        opacity: "0.5",
        boxShadow: "none",
        "&.selected": {
          background: theme.palette.primary.main,
          transform: "scale(1.1)",
          transition: "none",
        },
      },
    },
  },
}));
interface SliderProps {
  children:
    | (React.ReactChild[] &
        (
          | boolean
          | React.ReactChild
          | React.ReactFragment
          | React.ReactPortal
          | null
        ))
    | undefined;
  screenSize: { width: number; height: number; devicePixelRatio: number };
  isOpen: boolean;
  onClose: () => void;
  selectedItem: number | undefined;
}
const getSizePropertyOfElement = (
  element: any
): { width: number | null; height: number | null } => {
  let width, height;
  if (element.props) {
    width = element.props.width;
    height = element.props.height;
    if (element.props.style && (!width || !height)) {
      width = element.props.style.width;
      height = element.props.style.height;
    }
    if (element.props.sx && (!width || !height)) {
      width = element.props.sx.width;
      height = element.props.sx.height;
    }
  }
  return {
    width: (width && parseFloat(width)) || null,
    height: (height && parseFloat(height)) || null,
  };
};
const SliderComponent = ({
  isOpen,
  onClose,
  screenSize,
  children,
  selectedItem,
}: SliderProps) => {
  const [fullDisplayWidthFit, setFullDisplayWidthFit] =
    React.useState<boolean>(false);
  const [mySelectedItemNumber, setMySelectedItemNumber] =
    React.useState<number>(selectedItem || 0);
  const [itemsMagnifyMap, setItemsMagnifyMap] = React.useState<
    Map<number, boolean>
  >(
    Map<number, boolean>(
      Array.from({ length: children?.length || 0 }, (v, i) => [i, true])
    )
  );
  const possibleToMagnifyToFullWidth =
    itemsMagnifyMap.get(mySelectedItemNumber);
  const [constrolsPortal, setControlsPortal] =
    React.useState<HTMLDivElement | null>(null);
  const carouselRef = React.useRef<any>(null as any);
  useEffect(() => {
    if (!fullDisplayWidthFit) {
      const carousel: HTMLDivElement =
        carouselRef.current &&
        (carouselRef.current.carouselWrapperRef as HTMLDivElement);
      if (carousel && typeof carousel.querySelector === "function") {
        const mainSlider: HTMLDivElement =
          carousel.querySelector(".carousel-slider") || carousel;
        setControlsPortal(mainSlider);
      }
    }
  }, [fullDisplayWidthFit]);
  useEffect(() => {
    const carousel = carouselRef.current?.carouselWrapperRef as HTMLDivElement;
    if (carousel && typeof carousel.querySelector === "function") {
      const selectedSlideNode = carousel.querySelector(
        ".slide.selected .current-slide-paper"
      ) as HTMLDivElement;
      if (selectedSlideNode && selectedSlideNode.offsetWidth) {
        const needToMagnify =
          selectedSlideNode.offsetWidth <
          Math.min(screenSize.width - 2, Math.floor(screenSize.width * 0.98));
        if (itemsMagnifyMap.get(mySelectedItemNumber) !== needToMagnify) {
          setItemsMagnifyMap(
            itemsMagnifyMap.set(mySelectedItemNumber, needToMagnify)
          );
        }
      }
    }
  }, [itemsMagnifyMap, mySelectedItemNumber, screenSize.width]);
  useEffect(() => {
    if (!fullDisplayWidthFit) {
      const carousel: HTMLDivElement =
        carouselRef.current &&
        (carouselRef.current.carouselWrapperRef as HTMLDivElement);
      if (carousel && typeof carousel.querySelector === "function") {
        const thumbsWrapper: HTMLDivElement = carousel.querySelector(
          ".thumbs-wrapper"
        ) as any;
        if (
          thumbsWrapper &&
          typeof thumbsWrapper.querySelector === "function"
        ) {
          // const sliderElem = carousel.querySelector(
          //   ".carousel-slider"
          // ) as HTMLDivElement;
          // if (sliderElem && sliderElem.style) {
          //   sliderElem.style.maxWidth = screenSize.width + "px";
          // }
          const parentOfThumbsWrapper =
            thumbsWrapper.parentNode as HTMLDivElement;
          if (thumbsWrapper.style) {
            thumbsWrapper.style.maxWidth = screenSize.width + "px";
          }
          if (parentOfThumbsWrapper && parentOfThumbsWrapper.style) {
            parentOfThumbsWrapper.style.maxWidth = screenSize.width + "px";
            parentOfThumbsWrapper.style.padding = "0";
            parentOfThumbsWrapper.style.margin = "0";
          }
          const ul = thumbsWrapper.querySelector(".thumbs") as HTMLDivElement;
          if (ul && ul.style) {
            ul.style.maxWidth = screenSize.width + "px";
          }
        }
      }
    }
  }, [fullDisplayWidthFit, screenSize.width]);
  useEffect(() => {
    const keyupListener = (event: any) => {
      if (event.key === "Escape") {
        if (fullDisplayWidthFit) {
          setFullDisplayWidthFit(false);
        } else {
          onClose();
        }
      }
    };
    window.addEventListener("keyup", keyupListener);
    return () => window.removeEventListener("keyup", keyupListener);
  }, [fullDisplayWidthFit, onClose]);
  const item =
    fullDisplayWidthFit && children ? children[mySelectedItemNumber] : null;
  const calcItemSize = useCallback(
    (item: any) => {
      const { width, height } = getSizePropertyOfElement(item);
      const sx: {
        width: number | string;
        height: number | string;
        maxWidth?: number | string;
        maxHeight?: number | string;
      } = {
        width: fullDisplayWidthFit ? "100%" : "auto",
        height: fullDisplayWidthFit ? "auto" : screenSize.height - 92,
      };
      let marginTop: number = 0;
      if (width && height) {
        const newDims = calculateAspectRatioFit(
          width,
          height,
          fullDisplayWidthFit ? screenSize.width : screenSize.width - 2,
          fullDisplayWidthFit
            ? 10 * (screenSize.height + height) * screenSize.devicePixelRatio
            : screenSize.height - 92
        );
        sx.width = newDims.width + "px";
        sx.height = newDims.height + "px";
        marginTop = (screenSize.height - newDims.height - 92) / 2;
        if (marginTop < 0) {
          marginTop = 0;
        }
        //   sx.top = screenSize.height - sx.height / 2 + "px";
        //   sx.left = screenSize.width - sx.width / 2 + "px";
      } else {
        sx.maxWidth =
          (fullDisplayWidthFit ? screenSize.width : screenSize.width - 2) +
          "px";
        sx.maxHeight = fullDisplayWidthFit
          ? undefined
          : screenSize.height - 92 + "px";
      }
      return { sx, marginTop };
    },
    [
      fullDisplayWidthFit,
      screenSize.width,
      screenSize.height,
      screenSize.devicePixelRatio,
    ]
  );
  const zoomSlideToFullScreenWidth = useCallback(
    (event: any) => {
      if (event && typeof event.stopPropagation === "function") {
        event.stopPropagation();
      }
      if (!fullDisplayWidthFit) {
        setFullDisplayWidthFit(true);
      }
    },
    [fullDisplayWidthFit]
  );
  return (
    <>
      {fullDisplayWidthFit ? (
        <>
          <Box
            sx={{
              width: "100%",
              height: "100vh",
              overflowY: "scroll",
              overflowX: "hidden",
            }}
            onClick={(event) => {
              event.stopPropagation();
              if (fullDisplayWidthFit) {
                setFullDisplayWidthFit(false);
              }
            }}
          >
            <Paper
              sx={{
                borderRadius: 4,
                overflow: "hidden",
                margin: 0,
                padding: 0,
                cursor: fullDisplayWidthFit ? "zoom-out" : "zoom-in",
                ...calcItemSize(item).sx,
              }}
              onClick={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
              onMouseDown={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
              onTouchMove={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
              onTouchStart={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
            >
              {[item]}
            </Paper>
          </Box>
        </>
      ) : (
        <>
          {/* {constrolsPortal && (
            <Portal node={constrolsPortal}>
              <SlideBackBtn onClick={() => carouselRef.current.decrement()} />
              <SlideForwardBtn
                onClick={() => carouselRef.current.increment()}
              />
            </Portal>
          )} */}
          <StyledCarousel
            onChange={() => {
              process.nextTick(() => {
                const selectedItem = (carouselRef.current as Carousel).state
                  .selectedItem;
                setMySelectedItemNumber(selectedItem);
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              });
            }}
            showArrows={false}
            ref={carouselRef}
            selectedItem={mySelectedItemNumber}
            infiniteLoop={true}
            swipeable={true}
            emulateTouch={true}
            showThumbs={true}
            statusFormatter={(currentItem: number, total: number): string => {
              return `${currentItem} из ${total}`;
            }}
            renderThumbs={(children) => {
              children = Children.map(children, (child: any) =>
                React.cloneElement(child, { quality: 80 })
              ) as any as React.ReactChild[];
              return children;
            }}
            onClickItem={zoomSlideToFullScreenWidth}
            renderItem={(item: React.ReactChild[] | any, options) => {
              const { sx, marginTop } = calcItemSize(item);
              item = Children.map(item, (child: any) =>
                React.cloneElement(child, { quality: 100 })
              ) as any as React.ReactChild[];
              return (
                <>
                  {(Math.floor(marginTop || 0) || null) && (
                    <Box
                      onClick={onClose}
                      sx={{
                        height: marginTop + "px",
                        width: "100%",
                        cursor: "pointer",
                      }}
                    />
                  )}
                  <Box
                    onClick={onClose}
                    sx={{
                      width: "100%",
                      height: "100%",
                      display: "flex",
                      flexDirection: "row",
                      justifyContent: "center",
                      alignItems: "flex-start",
                      cursor: "pointer",
                    }}
                  >
                    <Paper
                      onClick={
                        (possibleToMagnifyToFullWidth &&
                          zoomSlideToFullScreenWidth) ||
                        ((event) => {
                          event.stopPropagation();
                        })
                      }
                      className={"current-slide-paper"}
                      sx={{
                        borderRadius: !possibleToMagnifyToFullWidth ? 0 : 3,
                        overflow: "hidden",
                        padding: 0,
                        cursor: !possibleToMagnifyToFullWidth
                          ? "default"
                          : fullDisplayWidthFit
                          ? "zoom-out"
                          : "zoom-in",
                        ...sx,
                      }}
                    >
                      {item}
                    </Paper>
                  </Box>
                </>
              );
            }}
          >
            {children}
          </StyledCarousel>
        </>
      )}
    </>
  );
};
const OneImageComponent = ({
  isOpen,
  onClose,
  screenSize,
  children,
  selectedItem,
}: SliderProps) => {
  children = Children.map(children, (child: any) =>
    React.cloneElement(child, { quality: 100 })
  ) as any;
  const [fullDisplayWidthFit, setFullDisplayWidthFit] =
    React.useState<boolean>(false);
  const [possibleToMagnifyToFullWidth, setPossibleToMagnifyToFullWidth] =
    React.useState<boolean>(true);
  const item = Array.isArray(children) ? children[0] : (children as any);
  const { width, height } = getSizePropertyOfElement(item);
  const sx: {
    width: number | string;
    height: number | string;
    maxWidth?: number | string;
    maxHeight?: number | string;
  } = {
    width: fullDisplayWidthFit ? "100%" : "auto",
    height: fullDisplayWidthFit ? "auto" : screenSize.height - 2,
  };
  let fullWidthAlready;
  let marginTop: number = 0;
  let hasMarginTop: null | boolean = null;
  if (width && height) {
    const newDims = calculateAspectRatioFit(
      width,
      height,
      fullDisplayWidthFit ? screenSize.width : screenSize.width - 2,
      fullDisplayWidthFit
        ? 10 * (screenSize.height + height) * screenSize.devicePixelRatio
        : screenSize.height - 2
    );
    fullWidthAlready = newDims.width >= screenSize.width - 2;
    sx.width = newDims.width + "px";
    sx.height = newDims.height + "px";
    marginTop = (screenSize.height - newDims.height - 2) / 2;
    if (marginTop < 0) {
      marginTop = 0;
    }
    //   sx.top = screenSize.height - sx.height / 2 + "px";
    //   sx.left = screenSize.width - sx.width / 2 + "px";
    hasMarginTop = !!Math.floor(marginTop || 0) || null;
  } else {
    sx.maxWidth =
      (fullDisplayWidthFit ? screenSize.width : screenSize.width - 2) + "px";
    sx.maxHeight = fullDisplayWidthFit
      ? undefined
      : screenSize.height - 2 + "px";
  }
  useEffect(() => {
    const keyupListener = (event: any) => {
      if (event.key === "Escape") {
        if (fullDisplayWidthFit) {
          setFullDisplayWidthFit(false);
        } else {
          onClose();
        }
      }
    };
    window.addEventListener("keyup", keyupListener);
    return () => window.removeEventListener("keyup", keyupListener);
  }, [fullDisplayWidthFit, onClose]);
  const containerBoxRef = React.useRef<HTMLDivElement>(null);
  useEffect(() => {
    const carousel = containerBoxRef.current as HTMLDivElement;
    if (carousel && typeof carousel.querySelector === "function") {
      const selectedSlideNode = carousel.querySelector(
        ".slide.selected .current-slide-paper"
      ) as HTMLDivElement;
      if (selectedSlideNode && selectedSlideNode.offsetWidth) {
        const needToMagnify =
          selectedSlideNode.offsetWidth <
          Math.min(screenSize.width - 2, Math.floor(screenSize.width * 0.98));
        if (possibleToMagnifyToFullWidth !== needToMagnify) {
          setPossibleToMagnifyToFullWidth(needToMagnify);
        }
      }
    } else {
      console.error("!");
    }
  }, [possibleToMagnifyToFullWidth, screenSize.width]);
  return (
    <>
      {fullDisplayWidthFit ? (
        <>
          <Box
            onClick={onClose}
            sx={{
              width: "100%",
              height: "100vh",
              overflowY: "scroll",
              overflowX: "hidden",
            }}
          >
            <Paper
              sx={{
                borderRadius: 3,
                overflow: "hidden",
                margin: 0,
                padding: 0,
                cursor: fullDisplayWidthFit ? "zoom-out" : "zoom-in",
                ...sx,
              }}
              onClick={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
              onMouseDown={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
              onTouchMove={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
              onTouchStart={(event) => {
                event.stopPropagation();
                if (fullDisplayWidthFit) {
                  setFullDisplayWidthFit(false);
                }
              }}
            >
              {children}
            </Paper>
          </Box>
        </>
      ) : (
        <>
          {hasMarginTop && (
            <Box
              onClick={onClose}
              sx={{
                height: marginTop + "px",
                width: "100%",
                cursor: "pointer",
              }}
            />
          )}
          <Box
            onClick={onClose}
            sx={{
              width: "100%",
              height: "100%",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "flex-start",
              cursor: "pointer",
            }}
          >
            <Paper
              ref={containerBoxRef}
              sx={{
                borderRadius: 4,
                overflow: "hidden",
                margin: "auto",
                padding: 0,
                cursor: !possibleToMagnifyToFullWidth
                  ? "default"
                  : fullDisplayWidthFit
                  ? "zoom-out"
                  : "zoom-in",
                ...sx,
              }}
              onClick={
                (possibleToMagnifyToFullWidth &&
                  ((event) => {
                    event.stopPropagation();
                    if (!fullDisplayWidthFit) {
                      setFullDisplayWidthFit(true);
                    }
                    return false;
                  })) ||
                ((event) => event.stopPropagation())
              }
            >
              {children}
            </Paper>
          </Box>
          {hasMarginTop && (
            <Box
              onClick={onClose}
              sx={{
                height: marginTop + "px",
                width: "100%",
                cursor: "pointer",
              }}
            />
          )}
        </>
      )}
    </>
  );
};
type Props = {
  children: SliderProps["children"];
  isOpen: boolean;
  onClose: () => void;
  selectedItem: number | undefined;
};
const FullScreenSlider = ({
  selectedItem,
  isOpen,
  onClose,
  children,
}: Props) => {
  const FullScreenViewer =
    Children.count(children) > 1 ? SliderComponent : OneImageComponent;
  const [screenSize, setScreenSize] = React.useState({
    width: window.innerWidth,
    height: window.innerHeight,
    devicePixelRatio: window.devicePixelRatio,
  });
  useEffect(() => {
    const resizeListener = () => {
      setScreenSize({
        width: window.innerWidth,
        height: window.innerHeight,
        devicePixelRatio: window.devicePixelRatio,
      });
    };
    window.addEventListener("resize", resizeListener);
    return () => {
      window.removeEventListener("resize", resizeListener);
    };
  }, []);
  return (
    <>
      {isOpen && (
        <StyledOverlay isOpen={isOpen} onClose={onClose}>
          <FullScreenViewer
            selectedItem={selectedItem}
            isOpen={isOpen}
            onClose={onClose}
            screenSize={screenSize}
          >
            {children}
          </FullScreenViewer>
        </StyledOverlay>
      )}
    </>
  );
};

export default FullScreenSlider;
